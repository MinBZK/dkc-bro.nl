"""Make rule id a string

Revision ID: c0910a620d83
Revises: 81a16d547e1e
Create Date: 2021-10-14 15:03:34.177690

"""

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "c0910a620d83"
down_revision = "81a16d547e1e"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("ALTER TABLE finding DROP CONSTRAINT fk_finding_rule CASCADE")
    op.alter_column("finding", "rule_id", type_=sa.String, existing_type=sa.INTEGER)
    op.alter_column("rule", "id", type_=sa.String, existing_type=sa.INTEGER)
    op.create_foreign_key(
        "fk_finding_rule",
        "finding",
        "rule",
        ["rule_id", "rule_object_type"],
        ["id", "object_type"],
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    ### This downgrade will fail if non numerical ids are present. ###
    op.execute("ALTER TABLE finding DROP CONSTRAINT fk_finding_rule CASCADE")
    op.alter_column("finding", "rule_id", type_=sa.INTEGER, existing_type=sa.VARCHAR)
    op.alter_column("rule", "id", type_=sa.INTEGER, existing_type=sa.VARCHAR)
    op.drop_constraint("fk_finding_rule", "finding", type_="foreignkey")
    # ### end Alembic commands ###
