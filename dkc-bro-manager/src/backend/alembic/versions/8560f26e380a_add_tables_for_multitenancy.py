"""Add tables for multitenancy

Revision ID: 8560f26e380a
Revises: 96ef9182861f
Create Date: 2024-08-29 12:50:07.198486

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "8560f26e380a"
down_revision = "96ef9182861f"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "organization",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("code", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "organization_rule",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("rule_id", sa.String(), nullable=True),
        sa.Column("rule_object_type", sa.String(), nullable=True),
        sa.Column("org_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("importance", sa.Integer(), nullable=True),
        sa.Column("explanation", sa.String(), nullable=True),
        sa.Column("docstring", sa.String(), nullable=True),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["org_id"],
            ["organization.id"],
        ),
        sa.ForeignKeyConstraint(
            ["rule_id", "rule_object_type"],
            ["rule.id", "rule.object_type"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "processing_request",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("rule_id", sa.String(), nullable=True),
        sa.Column("rule_object_type", sa.String(), nullable=True),
        sa.Column("org_id", sa.Integer(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["org_id"],
            ["organization.id"],
        ),
        sa.ForeignKeyConstraint(
            ["rule_id", "rule_object_type"],
            ["rule.id", "rule.object_type"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_index("ix_batch_id", table_name="batch")
    op.drop_index("ix_finding_id", table_name="finding")
    op.alter_column(
        "log_poller", "timestamp", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column(
        "project",
        "active",
        existing_type=sa.BOOLEAN(),
        nullable=True,
        comment="Actief project",
        existing_server_default=sa.text("true"),
    )
    op.alter_column(
        "project",
        "environment",
        existing_type=postgresql.ENUM(
            "DEV", "TEST", "ACC", "PROD", name="environments"
        ),
        nullable=True,
        existing_comment="Omgeving waarin de projecten zich bevinden.",
    )
    op.alter_column(
        "project",
        "project_name",
        existing_type=sa.VARCHAR(),
        comment="project naam",
        existing_nullable=True,
    )
    op.alter_column(
        "project",
        "project_nr",
        existing_type=sa.INTEGER(),
        nullable=True,
        existing_comment="project nummer",
    )
    op.alter_column(
        "project",
        "source_holder",
        existing_type=sa.VARCHAR(),
        comment="Bronhouder",
        existing_nullable=True,
    )
    op.alter_column(
        "project",
        "timestamp",
        existing_type=postgresql.TIMESTAMP(),
        comment="Tijdstempel van het projectnummer wat is toegevoegd",
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.create_index(
        op.f("ix_project_environment"), "project", ["environment"], unique=False
    )
    op.drop_index("ix_rule_id", table_name="rule")
    op.add_column("user", sa.Column("org_id", sa.Integer(), nullable=True))
    op.drop_index("ix_user_id", table_name="user")
    op.create_foreign_key(None, "user", "organization", ["org_id"], ["id"])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "user", type_="foreignkey")
    op.create_index("ix_user_id", "user", ["id"], unique=False)
    op.drop_column("user", "org_id")
    op.create_index("ix_rule_id", "rule", ["id"], unique=False)
    op.drop_index(op.f("ix_project_environment"), table_name="project")
    op.alter_column(
        "project",
        "timestamp",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Tijdstempel van het projectnummer wat is toegevoegd",
        existing_nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "project",
        "source_holder",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Bronhouder",
        existing_nullable=True,
    )
    op.alter_column(
        "project",
        "project_nr",
        existing_type=sa.INTEGER(),
        nullable=False,
        existing_comment="project nummer",
    )
    op.alter_column(
        "project",
        "project_name",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="project naam",
        existing_nullable=True,
    )
    op.alter_column(
        "project",
        "environment",
        existing_type=postgresql.ENUM(
            "DEV", "TEST", "ACC", "PROD", name="environments"
        ),
        nullable=False,
        existing_comment="Omgeving waarin de projecten zich bevinden.",
    )
    op.alter_column(
        "project",
        "active",
        existing_type=sa.BOOLEAN(),
        nullable=False,
        comment=None,
        existing_comment="Actief project",
        existing_server_default=sa.text("true"),
    )
    op.alter_column(
        "log_poller", "timestamp", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.create_index("ix_finding_id", "finding", ["id"], unique=False)
    op.create_index("ix_batch_id", "batch", ["id"], unique=False)
    op.drop_table("processing_request")
    op.drop_table("organization_rule")
    op.drop_table("organization")
    # ### end Alembic commands ###
